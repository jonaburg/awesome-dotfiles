--[[
--          _____                   _______                   _____
--         /\    \                 /::\    \                 /\    \
--        /::\    \               /::::\    \               /::\____\
--        \:::\    \             /::::::\    \             /::::|   |
--         \:::\    \           /::::::::\    \           /:::::|   |
--          \:::\    \         /:::/~~\:::\    \         /::::::|   |
--           \:::\    \       /:::/    \:::\    \       /:::/|::|   |
--           /::::\    \     /:::/    / \:::\    \     /:::/ |::|   |
--  _____   /::::::\    \   /:::/____/   \:::\____\   /:::/  |::|   | _____        's rc.lua
-- /\    \ /:::/\:::\    \ |:::|    |     |:::|    | /:::/   |::|   |/\    \
--/::\    /:::/  \:::\____\|:::|____|     |:::|    |/:: /    |::|   /::\____\
--\:::\  /:::/    \::/    / \:::\    \   /:::/    / \::/    /|::|  /:::/    /
-- \:::\/:::/    / \/____/   \:::\    \ /:::/    /   \/____/ |::| /:::/    /
--  \::::::/    /             \:::\    /:::/    /            |::|/:::/    /
--   \::::/    /               \:::\__/:::/    /             |::::::/    /
--    \::/    /                 \::::::::/    /              |:::::/    /
--     \/____/                   \::::::/    /               |::::/    /
--                                \::::/    /                /:::/    /
--                                 \::/____/                /:::/    /
--                                  ~~                      \::/    /
--                                                           \/____/
--			01.10.19

--]]

-- required libs
local awesome, client, mouse, screen, tag = awesome, client, mouse, screen, tag
local ipairs, string, os, table, tostring, tonumber, type = ipairs, string, os, table, tostring, tonumber, type

-----{ uses...}
-- If LuaRocks is installed, make sure that packages installed through it are
-- found (e.g. lgi). If LuaRocks is not installed, do nothing.
pcall(require, "luarocks.loader")

-- Standard awesome library
	local gears = require("gears")
	local awful = require("awful")
require("awful.autofocus")


-- expose addono
local revelation=require("revelation")
-- termgrp addon
local termgrp = require('termgrp')
	termgrp.terminal = "st"
	termgrp.dmenu = "rofi -dmenu"

-- Widget and layout library
	local wibox = require("wibox")

-- Theme handling library
	local beautiful = require("beautiful")
-- Notification library
--	local naughty = require("naughty")
	local menubar = require("menubar")
	local hotkeys_popup = require("awful.hotkeys_popup")
        local lain          = require("lain")
	local freedesktop   = require("freedesktop")
	local my_table      = awful.util.table or gears.table -- 4.{0,1} compatibility
	local dpi           = require("beautiful.xresources").apply_dpi

-- Enable hotkeys help widget for VIM and other apps
-- when client with a matching name is opened:
	require("awful.hotkeys_popup.keys")

-- widget.awesome dude widgets
--	local ramgraph_widget = require("awesome-wm-widgets.ramgraph-widget.ramgraph")
	local battery_widget = require("awesome-wm-widgets.battery-widget.battery")
	local mpdarc_widget = require("awesome-wm-widgets.mpdarc-widget.mpdarc")

local focus_switch_byd = function(dir)
	return function()
	awful.client.focus.bydirection(dir)
	if client.focus then client.focus:raise() end
	end
end


-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)


--[[ if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end


-- Handle runtime errors after startup

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

]]

local themes = {

    "blackburn",       -- 1
    "copland",         -- 2
    "dremora",         -- 3
    "holo",            -- 4
    "multicolor",      -- 5
    "powerarrow",      -- 6
    "powerarrow-dark", -- 7
    "rainbow",         -- 8
    "steamburn",       -- 9
    "vertex",          -- 10
    "jontheme",        -- 11
}

	local chosen_theme = themes[11]

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init(gears.filesystem.get_themes_dir() .. "%s/.config/awesome/themes/%s/theme.lua")
revelation.init()

-- This is used later as the default terminal and editor to run.
terminal = "st"
editor = os.getenv("EDITOR") or "vim"
editor_cmd = terminal .. " -e " .. editor
-- Default modkey.
-- Usually, Mod5 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"



-- { define layouts

awful.layout.layouts = {
--    lain.layout.termfair.center,
--    lain.layout.centerwork,
    lain.layout.uselesstilecenter,
--    awful.layout.suit.floating,
    awful.layout.suit.tile,
    lain.layout.cascade,
--    awful.layout.suit.spiral,
    --awful.layout.suit.magnifier,
    }


layouts = awful.layout.layouts
tags = {
	--names = { "Ôâ† ", "Ôîå ", "Ôîé ", "Ôêö ", "ÔêÉ ", "ÔêÑ " },
	names = { "1 ", "2 ", "3 ", "4 ", "5 ", "6 ", "7 ", "8 ", "9 " },
	layout = {layouts[1],layouts[2],layouts[1],layouts[1],layouts[1],layouts[1],
	icons = {
       		 "/home/jon/.config/awesome/themes/jontheme/icons/titlebar/slot.png",
       		 "/home/jon/.config/awesome/themes/jontheme/icons/titlebar/slot.png",
       		 "/home/jon/.config/awesome/themes/jontheme/icons/titlebar/slot.png",
           	 "/home/jon/.config/awesome/themes/jontheme/icons/titlebar/slot.png"
    }
}}






-- {{{Table of layouts to cover with awful.layout.inc, order matters.
--    awful.layout.suit.max,
--    awful.layout.suit.max.fullscreen,
--    awful.layout.suit.fair.horizontal,
--    awful.layout.suit.tile.left,
--    awful.layout.suit.tile.bottom,
--    awful.layout.suit.tile.top,
--    awful.layout.suit.corner.nw,
--    awful.layout.suit.corner.ne,
--    awful.layout.suit.corner.sw,
--    awful.layout.suit.corner.se,
--}
-- }}}
beautiful.init(string.format("%s/.config/awesome/themes/%s/theme.lua", os.getenv("HOME"), chosen_theme))



-- {{{ Menu
-- Create a launcher widget and a main menu (right click on desktop to open)
myawesomemenu = {
   { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", function() awesome.quit() end },
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "open terminal", terminal }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })

-- hide menu when mouse leaves it
--awful.util.mymainmenu.wibox:connect_signal("mouse::leave", function() awful.util.mymainmenu:hide() end)

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}


-- {{{ Wibar

-- Keyboard map indicator and switcher
--mykeyboardlayout = awful.widget.keyboardlayout()
local markup = lain.util.markup
local my_table = awful.util.table or gears.table -- 4.{0,1} compatibility

local theme                                     = {}
theme.confdir                                   = os.getenv("HOME") .. "/.config/awesome/themes/jontheme"
theme.wallpaper                                 = theme.confdir .. "/wall.png"
theme.font                                      = "Terminus 12"

-- Create a textclock widget
--mytextclock = wibox.widget.textclock()
os.setlocale(os.getenv("LANG")) -- to localize the clock
local clockicon = wibox.widget.imagebox(theme.widget_clock)
--local mytextclock = wibox.widget.textclock(markup("#90afe8", "%d %B ") .. markup("#98ebc8", "üïó ") .. markup("#98ebc8", " %H:%M "))
local mytextclock = wibox.widget.textclock(markup("#fffedb", "%d %B  ") .. markup("#98ebc8", "üïó ") .. markup("#fffede", " %H:%M "))
mytextclock.font = theme.font

--local mycal = lain.widget.cal {
--	attach_to = { mytextclock, ... },
--}
----------------
local cpu = lain.widget.cpu {
	settings = function()
        widget:set_markup(markup.fontfg(theme.font, "#e33a6e", "üíΩ " ..  cpu_now.usage .. "%  "))
	end
}
----------------

--modernclock
--local mytextclock = wibox.widget.textclock()
local mytextclock = wibox.widget.textclock(markup("#fffedb", "%d %B  ") .. markup("#98ebc8", "üïó ") .. markup("#fffede", " %H:%M "))
mytextclock.font = theme.font
--local myclock_t = awful.tooltip { }
--myclock_t:add_to_object(mytextclock)
-- awful.spawn(string.format("%s -e skippy-xd --toggle", terminal ))
--mytextclock:connect_signal('mouse::enter', function()
 --awful.spawn(terminal.." -e skippy-xd --toggle")
--end)



--[[ / fs

local fsicon = wibox.widget.imagebox(2heme.widget_fs)
theme.fs = lain.widget.fs({
    notification_preset = { font = "Terminus 10", fg = theme.fg_normal },
    settings  = function()
        widget:set_markup(markup.fontfg(theme.font, "#80d9d8", string.format("%.1f", fs_now["/"].used) .. "% "))
    end
})
]]

--Battery
local bat = lain.widget.bat({
    settings = function()
        bat_header = " Bat "
        bat_p      = bat_now.perc .. " "
        widget:set_markup(markup.font(theme.font, markup(gray, bat_header) .. markup(white, bat_p)))
    end
})






--Volume bar
local volume = lain.widget.alsabar(
    {
	colors = {
		background = "#121212",
--		background = "#383838",
--		background = "#000000",
--		unmute = "#a2b881",
		unmute = "#f8f8b9",
		mute = "#FF9F9F"
		},
        width=70, followtag = true,
        ticks = true, ticks_size = 3,
    }
)

volume.bar.shape =  gears.shape.hexagon
volume.bar.margins = {
		top = 7,
		bottom = 3,
	},


volume.bar:buttons(awful.util.table.join(
    awful.button({}, 3, function() -- left click
        awful.spawn(string.format("%s -e alsamixer", terminal))
    end),

    awful.button({}, 2, function() -- middle click
        awful.spawn(string.format("%s -e ncmpcpp", terminal))
    end),

    awful.button({}, 1, function() -- right click
        os.execute(string.format("%s set %s toggle", volume.cmd, volume.togglechannel or volume.channel))
        volume.update()
    end),

    awful.button({}, 4, function() -- scroll up
        os.execute(string.format("%s set %s 1%%+", volume.cmd, volume.channel))
        volume.update()
    end),

    awful.button({}, 5, function() -- scroll down
        os.execute(string.format("%s set %s 1%%-", volume.cmd, volume.channel))
        volume.update()
    end)


))

local volume_widget = wibox.container.background(volume.bar)

-- ALSA volume
local volicon = wibox.widget.imagebox(theme.widget_vol)
theme.volume = lain.widget.alsa({
    settings = function()
        if volume_now.status == "off" then
            volume_now.level = volume_now.level .. "M"
        end

        widget:set_markup(markup.fontfg(theme.font, "#d6c5e3", " Vol: "..volume_now.level ..  "%   "))
    end
})







-- Weather
local weathericon = wibox.widget.imagebox(theme.widget_weather)
theme.weather = lain.widget.weather({
    city_id = 2643743, -- placeholder (London)
    notification_preset = { font = "Terminus 10", fg = theme.fg_normal },
    weather_na_markup = markup.fontfg(theme.font2, "#fffedb", "N/A "),
    settings = function()
        descr = weather_now["weather"][1]["description"]:lower()
        units = math.floor(weather_now["main"]["temp"])
--        widget:set_markup(markup.fontfg(theme.font, "#eca4c4", descr .. "üå§ @ " .. units .. "¬∞C "))
        widget:set_markup(markup.fontfg(theme.font, "#fffedb", "üå§  " .. units .. "¬∞C   "))
    end
})






-- Coretemp
local tempicon = wibox.widget.imagebox(theme.widget_temp)
local temp = lain.widget.temp({
    settings = function()
        widget:set_markup(markup.fontfg(theme.font, "#e1e3c5", coretemp_now .. "¬∞C "))
    end
})

-- MPD
local mpdicon = wibox.widget.imagebox()
theme.mpd = lain.widget.mpd({
    settings = function()
        mpd_notification_preset = {
            text = string.format("%s [%s] - %s\n%s", mpd_now.artist,
                   mpd_now.album, mpd_now.date, mpd_now.title)
        }

        if mpd_now.state == "play" then
            artist = mpd_now.artist .. " > "
            title  = mpd_now.title .. " "
            mpdicon:set_image(theme.widget_note_on)
        elseif mpd_now.state == "pause" then
            artist = "mpd "
            title  = "paused "
        else
            artist = ""
            title  = ""
            --mpdicon:set_image() -- not working in 4.0
            mpdicon._private.image = nil
            mpdicon:emit_signal("widget::redraw_needed")
            mpdicon:emit_signal("widget::layout_changed")
        end
        widget:set_markup(markup.fontfg(theme.font, "#e54c62", artist) .. markup.fontfg(theme.font, "#b2b2b2", title))
    end
})

-- Separators
local first     = wibox.widget.textbox(markup.font("Terminus 3", " "))
local spr       = wibox.widget.textbox(' ')
local small_spr = wibox.widget.textbox(markup.font("Terminus 4", " "))
local bar_spr   = wibox.widget.textbox(markup.font("Terminus 3", " ") .. markup.fontfg(theme.font, "#777777", "|  ") .. markup.font("Terminus 5", " "))





-- Create a wibox for each screen and add it
--local taglist_buttons = gears.table.join(
--                    awful.button({ }, 1, function(t) t:view_only() end),
--                    awful.button({ modkey }, 1, function(t)
--                                              if client.focus then
--                                                  client.focus:move_to_tag(t)
--                                              end
--                                          end),
--                    awful.button({ }, 3, awful.tag.viewtoggle),
--                    awful.button({ modkey }, 3, function(t)
--                                              if client.focus then
--                                                  client.focus:toggle_tag(t)
--                                              end
--                                          end),
--                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
--                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
--                )

-- local tasklist_buttons = gears.table.join(
--                      awful.button({ }, 1, function (c)
--                                               if c == client.focus then
--                                                   c.minimized = true
--                                              else
--                                                   c:emit_signal(
--                                                       "request::activate",
--                                                      "tasklist",
--                                                     {raise = true}
--                                                )
--                                           end
--                                           end),
--                      awful.button({ }, 3, function()
--                                              awful.menu.client_list({ theme = { width = 250 } })
--                                          end),
--                    awful.button({ }, 4, function ()
--                                            awful.client.focus.byidx(1)
--                                       end),
--                      awful.button({ }, 5, function ()
--                                               awful.client.focus.byidx(-1)
--                                          end))


-- {{{ Mouse bindings
root.buttons(my_table.join(
    awful.button({ }, 3, function () awful.util.mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

awful.util.taglist_buttons = my_table.join(
    awful.button({ }, 1, function(t) t:view_only() end),
    awful.button({ modkey }, 1, function(t)
        if client.focus then
            client.focus:move_to_tag(t)
        end
    end),
    awful.button({ }, 3, awful.tag.viewtoggle),
    awful.button({ modkey }, 3, function(t)
        if client.focus then
            client.focus:toggle_tag(t)
        end
    end),
    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
)

awful.util.tasklist_buttons = my_table.join(
    awful.button({ }, 1, function (c)
        if c == client.focus then
            c.minimized = true
        else
            --c:emit_signal("request::activate", "tasklist", {raise = true})<Paste>

            -- Without this, the following
            -- :isvisible() makes no sense
            c.minimized = false
            if not c:isvisible() and c.first_tag then
                c.first_tag:view_only()
            end
            -- This will also un-minimize
            -- the client, if needed
            client.focus = c
            c:raise()
        end
    end),
    awful.button({ }, 2, function (c) c:kill() end),
    awful.button({ }, 3, function ()
        local instance = nil

        return function ()
            if instance and instance.wibox.visible then
                instance:hide()
                instance = nil
            else
                instance = awful.menu.clients({theme = {width = dpi(250)}})
            end
        end
    end),
    awful.button({ }, 4, function () awful.client.focus.byidx(1) end),
    awful.button({ }, 5, function () awful.client.focus.byidx(-1) end)
)





local function set_wallpaper(s)
    -- Wallpaper
    if beautiful.wallpaper then
        local wallpaper = beautiful.wallpaper
        -- If wallpaper is a function, call it with the screen
        if type(wallpaper) == "function" then
			    wallpaper = wallpaper(s)
		end
        gears.wallpaper.maximized(wallpaper, s, true)
    end
end

--{{{ Tag Wallpapers
local function set_forthis(s)
     for s = 1, screen.count() do
            for t = 1, 6 do
          tags[s][t]:connect_signal("property::selected", function (tag)
           if not tag.selected then return end
           theme.wallpaper = "/home/jon/.config/awesome/themes/jon/" .. t .. ".\
jpg"
             gears.wallpaper.maximized(beautiful.wallpaper, s, true)
	end)
    end
end
end

-- }}}

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

awful.screen.connect_for_each_screen(function(s)
    -- Wallpaper
    set_wallpaper(s)

-- Each screen has its own tag table.
--   awful.tag({ "1", "2", "3", "4", "5", "6", "7", "8", "9" }, s, awful.layout.layouts[1])
--    awful.tag({ "1", "2", "3", "4", "5"}, s, awful.layout.layouts[1])
--    awful.tag({ "www", "2", "3", "4", "5"}, s, awful.layout.layouts[1])

  tags[s] = awful.tag(tags.names, s, tags.layout)

--[[ for s = 1, screen.count() do
  tags[s] = awful.tag(tags.names, s, tags.layout)

  for i, t in ipairs(tags[s]) do
      awful.tag.seticon(tags.icons[i], t)
      awful.tag.setproperty(t, "icon_only", 1)
  end
end
]]


-- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()
    -- Create an imagebox widget which will contain an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox(s)
    s.mylayoutbox:buttons(gears.table.join(
                           awful.button({ }, 1, function () awful.layout.inc( 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(-1) end),
                           awful.button({ }, 4, function () awful.layout.inc( 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))
    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist {
        screen  = s,
        filter  = awful.widget.taglist.filter.all,
        buttons = taglist_buttons
    }

    -- Create a tasklist widget
--[[    s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        buttons = tasklist_buttons
    }
    ]]

	-- new tasklist

s.mytasklist = awful.widget.tasklist {
    screen   = s,
    filter   = awful.widget.tasklist.filter.currenttags,
    buttons  = tasklist_buttons,
    style    = {
        border_width = 10,
        border_color = '#777777',
        --shape        = gears.shape.bar,
        shape        = gears.shape.hexagon,
    },
    layout   = {
        spacing = 5,
        spacing_widget = {
            {
                forced_width = 10,
--                shape        = gears.shape.square,
                shape        = gears.shape.hexagon,
		color	     = "#000000",
--		color	     = "#ffffff",
                widget       = wibox.widget.separator
            },
            valign = 'center',
            halign = 'center',
            widget = wibox.container.place,
        },
        layout  = wibox.layout.flex.horizontal
    },
    -- Notice that there is *NO* wibox.wibox prefix, it is a template,
    -- not a widget instance.
    widget_template = {
        {
            {
                {
                    {
                        id     = 'icon_role',
                        widget = wibox.widget.imagebox,
                    },
                    margins = 2,
                    widget  = wibox.container.margin,
                },
                {
                    id     = 'text_role',
                    widget = wibox.widget.textbox,
                },
                layout = wibox.layout.fixed.horizontal,
            },
            left  = 10,
            right = 10,
            widget = wibox.container.margin
        },
        id     = 'background_role',
        widget = wibox.container.background,
    },
}


--awful.screen.connect_for_each_screen(function(s) beautiful.at_screen_connect(s) end)


-- TOP WIBOX
    -- Create the wibox
    s.mywibox = awful.wibar({ position = "top", screen = s })

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
         --   mylauncher,
            s.mytaglist,
        },

        s.mytasklist, -- Middle widget

        { -- Right widgets
	    bar_spr,
--	    mpdarc_widget,
--	    bar_spr,
--            mpdicon,
--	    theme.fs.widget,
	    theme.weather.widget,
	    bar_spr,
	    cpu.widget,
--	    temp.widget,
	    bar_spr,
            layout = wibox.layout.fixed.horizontal,
            mytextclock,
	    bar_spr,
	    theme.volume.widget,
	    volume.bar,
	    bar_spr,
            wibox.widget.systray(),
	    baticon,
	    bat.widget,
            s.mylayoutbox,
        },
    }


--        -- Create the side wibox
--        --s.mysidewibox = awful.wibar({ position = "right", screen = s, border_width = 15, height = dpi(1000), bg = theme.bg_normal, fg = theme.fg_normal })
--        s.mysidewibox = awful.wibar({ position = "right", screen = s, orientation="east",  border_width = 20, height = dpi(990), bg = "#000000", fg = theme.fg_normal })
--
--        -- Add widgets to the bottom wibox
--        s.mysidewibox:setup {
--            layout = wibox.layout.fixed.horizontal,
--    --	    temp.widget,
--    --            s.mylayoutbox,
--    	    volume.bar,
--            { -- Left widgets
--                layout = wibox.layout.fixed.horizontal,
--    	   temp.widget,
--            },
--    --        s.mytasklist, -- Middle widget
--            { -- Right widgets
--                layout = wibox.layout.fixed.horizontal,
--    --            s.mylayoutbox,
--    	   -- temp.widget,
--
--            },
--        }


--    --create again
--    -- Create the wibox
--    s.mysidewibox = awful.wibox({ position="right", orientation="north", screen = s })
--
--    -- Widgets that are aligned to the bottom
--    s.mysidewibox:setup{
--    local bottom_layout = wibox.layout.fixed.horizontal()
--    bottom_layout:add(wibox.layout.margin(mytextclock,0,5))
--    if s == 1 then bottom_layout:add(wibox.widget.systray()) end
--    bottom_layout:add(mypromptbox[s])
--
--    -- Now bring it all together (with the tasklist in the middle)
--    local layout = wibox.layout.align.horizontal()
--    layout:set_first(bottom_layout)
--    layout:set_second(wibox.layout.margin(mytasklist[s],5,5))
--    layout:set_third(mytaglist[s])
--
--    -- Rotate
--    -- http://comments.gmane.org/gmane.comp.window-managers.awesome/9676
--    local rotate = wibox.layout.rotate()
--    rotate:set_direction("east")
--    rotate:set_widget(layout)
--
--    -- Widgets from top to bottom
--    local wibox_layout = wibox.layout.fixed.vertical()
--    wibox_layout:add(mylauncher)
--    wibox_layout:add(wibox.layout.margin(mylayoutbox[s],0,0,5,5))
--    wibox_layout:add(rotate)
--
--    mywibox[s]:set_widget(wibox_layout)
--    }
--




end)




-- }}}

-- {{{ Mouse bindings
root.buttons(gears.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
	globalkeys = gears.table.join(
  	--  awful.key({ modkey,          }, "s",      hotkeys_popup.show_help,
 	 --           {description="show help", group="awesome"}),
    	awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
       	       {description = "view previous", group = "tag"}),
	-- 	scroll left TAG
    	awful.key({ modkey,           }, "g",   awful.tag.viewprev,
              {description = "view previous", group = "tag"}),

   	 awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
              {description = "view next", group = "tag"}),
--	scroll right TAG
	awful.key({ modkey,           }, ";",  awful.tag.viewnext,
      	      {description = "view next", group = "tag"}),
	awful.key({ modkey,           }, "Tab", awful.tag.history.restore,
		{description = "go back", group = "tag"}),

----------------------------------------------------------------------------------------------------------- Create a new termgrp
-- Like tmux new-session
awful.key({ modkey,          }, "0", function() termgrp.action.create("-p \"create termgroup: \"") end),
-- Detach a termgrp
-- Like tmux detach-client
awful.key({ modkey, "Shift"   }, "d", function() termgrp.action.detach("-p \"detach termgroup: \"") end),
-- Attach a termgrp
-- Like tmux attach-session
awful.key({ modkey, "Shift"    }, "c", function() termgrp.action.attach("-p \"attach termgroup: \"") end),
-- If user focuses on a window of a termgrp, launch a terminal in the same termgrp.
-- Otherwise, launch a normal terminal.
-- Like tmux new-window
awful.key({ modkey, "Shift" }, "Return", function() termgrp.action.spawn() end,
    {description = "open a terminal", group = "launcher"}),
-- If user focuses on a window of a termgrp, launch a terminal app in the same termgrp.
-- Otherwise, launch a normal terminal app.
-- Like tmux new-window app
-- app = "ranger"
awful.key({ modkey }, "r", function() termgrp.action.spawn(app) end,
    {description = "open file manager", group = "launcher"}),
-----------------------------------------------------------------------------------------------------------------------



--revelation playin wit
	awful.key({ modkey,           }, "b", revelation,
		{description = "bring up", group = "tag"}),

--copy primary to clipboard (terminals to gtk)
	awful.key({ modkey }, "c", function () awful.spawn.with_shell("xsel | xsel -i -b") end,
	{description = "copy terminal to gtk", group = "hotkeys"}),
--copy clipboard to primary (gtk to terminal)
	awful.key({ modkey }, "v", function () awful.spawn.with_shell("xsel -b | xsel") end,
	{description = "copy gtk to terminal", group = "hotkeys"}),


--[[
    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "client"}
    ),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
              {description = "show main menu", group = "awesome"}),
--]]




    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
              {description = "swap with previous client by index", group = "client"}),
--    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
  --            {description = "focus the next screen", group = "screen"}),
 --   awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
--              {description = "focus the previous screen", group = "screen"}),
 --   awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
--              {description = "jump to urgent client", group = "client"}),

    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "go back", group = "client"}),








	-- {{{{   USELESS GAPS (LAIN Stuff)
-- On the fly useless gaps change
    awful.key({ modkey, }, "s", function () lain.util.useless_gaps_resize(5) end,
              {description = "increment useless gaps", group = "tag"}),
    awful.key({ modkey, "Shift" }, "s", function () lain.util.useless_gaps_resize(-5) end,
              {description = "decrement useless gaps", group = "tag"}),


	-- Dynamic tagging
    awful.key({ modkey, "Shift" }, "n", function () lain.util.add_tag() end,
              {description = "add new tag", group = "tag"}),
    awful.key({ modkey, "Shift" }, "r", function () lain.util.rename_tag() end,
              {description = "rename tag", group = "tag"}),
--    awful.key({ modkey, "Shift" }, "Left", function () lain.util.move_tag(-1) end,
--              {description = "move tag to the left", group = "tag"}),
--    awful.key({ modkey, "Shift" }, "Right", function () lain.util.move_tag(1) end,
--              {description = "move tag to the right", group = "tag"}),
    awful.key({ modkey, "Shift" }, "d", function () lain.util.delete_tag() end,
              {description = "delete tag", group = "tag"}),

 -- 	}}}}

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
  --  awful.key({ modkey, "Shift"   }, "q", awesome.quit,
   --           {description = "quit awesome", group = "awesome"}),


--[[lukestyle
    awful.key({ modkey,   "Shift"        }, "o",     function () awful.tag.incmwfact( 0.025)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,   "Shift"        }, "y",     function () awful.tag.incmwfact(-0.025)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"          }, "u",     function () awful.client.incwfact( -0.025)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"         }, "i",     function () awful.client.incwfact(0.025)          end,
              {description = "decrease master width factor", group = "layout"}),

--]]


    awful.key({ modkey, }, "h",     focus_switch_byd("left"),
              {description = "go to left client", group = "layout"}),
    awful.key({ modkey, }, "j",     focus_switch_byd("down"),
              {description = "go to down client", group = "layout"}),
    awful.key({ modkey, }, "k",     focus_switch_byd("up"),
              {description = "go to up client", group = "layout"}),
    awful.key({ modkey, }, "l",     focus_switch_byd("right"),
              {description = "go to right client", group = "layout"}),






    awful.key({ modkey,          }, "o",     function () awful.tag.incmwfact( 0.025)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,          }, "y",     function () awful.tag.incmwfact(-0.025)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey,           }, "u",     function () awful.client.incwfact( -0.025)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,          }, "i",     function () awful.client.incwfact(0.025)          end,
              {description = "decrease master width factor", group = "layout"}),






    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
              {description = "select next", group = "layout"}),
 --   awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
  --            {description = "select previous", group = "layout"}),







    awful.key({ modkey, "Control" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                    c:emit_signal(
                        "request::activate", "key.unminimize", {raise = true}
                    )
                  end
              end,
              {description = "restore minimized", group = "client"}),

    -- Prompt
--    awful.key({ modkey },            "r",     function () awful.screen.focused().mypromptbox:run() end,
 --             {description = "run prompt", group = "launcher"}),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run {
                    prompt       = "Run Lua code: ",
                    textbox      = awful.screen.focused().mypromptbox.widget,
                    exe_callback = awful.util.eval,
                    history_path = awful.util.get_cache_dir() .. "/history_eval"
                  }
              end,
              {description = "lua execute prompt", group = "awesome"}),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end,
              {description = "show the menubar", group = "launcher"})
)

clientkeys = gears.table.join(
    awful.key({ modkey,           }, "f",
        function (c)
            c.fullscreen = not c.fullscreen
            c:raise()
        end,
        {description = "toggle fullscreen", group = "client"}),



    awful.key({ modkey,   }, "q",      function (c) c:kill()                         end,
              {description = "close", group = "client"}),
    awful.key({ modkey, "Shift" }, "space",  awful.client.floating.toggle                     ,
              {description = "toggle floating", group = "client"}),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
              {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
              {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
              {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end ,
        {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end ,
        {description = "(un)maximize", group = "client"}),
    awful.key({ modkey, "Control" }, "m",
        function (c)
            c.maximized_vertical = not c.maximized_vertical
            c:raise()
        end ,
        {description = "(un)maximize vertically", group = "client"}),
    awful.key({ modkey, "Shift"   }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c:raise()
        end ,
        {description = "(un)maximize horizontally", group = "client"})
)



-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it work on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  {description = "toggle tag #" .. i, group = "tag"}),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"}),
        -- Toggle tag on focused client.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:toggle_tag(tag)
                          end
                      end
                  end,
                  {description = "toggle focused client on tag #" .. i, group = "tag"})
    )
end


clientbuttons = gears.table.join(
    awful.button({ }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
    end),
    awful.button({ modkey }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.move(c)
    end),
    awful.button({ modkey }, 3, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.resize(c)
    end)
)


-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
	  "pidgin",
	  "Buddy List",
--	  "Steam",
        },
        class = {
          "Arandr",
          "Blueman-manager",
          "Gpick",
	  "Buddy List",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
          "Wpa_gui",
          "veromix",
--	  "Steam",
          "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      },
properties = { floating = true },


},

    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" } },
    properties = { titlebars_enabled = false } },

    -- Set Firefox to always map on the tag named "2" on screen 1.
     { rule = { name = "firefox" },
       properties = { screen = 1, tag = "2" } },


     { rule = { name = "htop" },
       properties = { floating = true },
       callback = function(c)
        awful.client.moveresize(550, 50, 100, 100, c)
   end
 }





}


-- }}}


-- {{{ Signals

-- Signal function to execute when a new client appears.
	client.connect_signal("manage", function (c)
			-- c.shape = gears.shape.rounded_rect
			-- adds rounded edges (radius of 10deg)
--			  c.shape = function(cr,w,h)
--		      		gears.shape.rounded_rect(cr,w,h,10)
--	     		 	end

-- Signal function to execute when a new client appears.
--client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.

     if not awesome.startup then awful.client.setslave(c) end


    if awesome.startup and
      not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- Custom
    if beautiful.titlebar_fun then
        beautiful.titlebar_fun(c)
        return
    end

    -- Default
    -- buttons for the titlebar
    local buttons = my_table.join(
        awful.button({ }, 1, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 2, function() c:kill() end),
        awful.button({ }, 3, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c, {size = dpi(16)}) : setup {
        { -- Left
         --   awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.
--client.connect_signal("mouse::enter", function(c)
--    c:emit_signal("request::activate", "mouse_enter", {raise = false})
--end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)



	---{ if float then titlebar }
client.connect_signal("property::floating", function(c)
    if c.floating then
        awful.titlebar.show(c)
    else
        awful.titlebar.hide(c)
    end
end)





-- if floating, and mouse over, then show titlebar.
--[[

client.connect_signal("property::floating", function(c)
    if c.floating then
	client.connect_signal("mouse::enter", function(c)
		    if c.enter then
      			     awful.titlebar.hide(c)
		    else
      			     awful.titlebar.show(c)
   		    end
 	  end)
	client.connect_signal("mouse::leave", function(c)
  		    if c.leave then
 			     awful.titlebar.show(c)
    		   else
  		            awful.titlebar.hide(c)
    		   end
	  end)
     else

        	awful.titlebar.hide(c)
    end
end)

--]]






-- making titlebar disappear on mouseleave


-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = true})
--        awful.titlebar.show(c)

end)



-- }}}




